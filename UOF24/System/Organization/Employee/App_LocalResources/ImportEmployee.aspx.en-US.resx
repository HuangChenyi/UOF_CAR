<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDownloadResource1.Text" xml:space="preserve">
    <value>Download excel template</value>
  </data>
  <data name="btnDownloadResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="cbSendPWResource1.Text" xml:space="preserve">
    <value>Send password notification letter to user immediately after account is created. </value>
  </data>
  <data name="cbSendPWResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="Label39Resource1.Text" xml:space="preserve">
    <value>If not selected, can also return to main page for selection of batch sending password letters.</value>
  </data>
  <data name="Label39Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="Label3Resource1.Text" xml:space="preserve">
    <value>The</value>
  </data>
  <data name="Label3Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="Label5Resource1.Text" xml:space="preserve">
    <value>line data makes mistakes and it is unable to be imported.</value>
  </data>
  <data name="Label5Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbAccountExistResource1.Text" xml:space="preserve">
    <value>Account already exist</value>
  </data>
  <data name="lbAccountExistResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbAccountFormatErrorResource1.Text" xml:space="preserve">
    <value>Account format incorrect</value>
  </data>
  <data name="lbAccountFormatErrorResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbCardNoExist1.Text" xml:space="preserve">
    <value>Card No. is already existed</value>
  </data>
  <data name="lbCardNoExist1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbEmployeeNoExist1.Text" xml:space="preserve">
    <value>Employee No is already exist</value>
  </data>
  <data name="lbEmployeeNoExist1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbErrorResource1.Text" xml:space="preserve">
    <value>Import Error</value>
  </data>
  <data name="lbErrorResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbExcelVersionResource1.Text" xml:space="preserve">
    <value>v6.0</value>
  </data>
  <data name="lbExcelVersionResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbFormatErrorMsgResource1.Text" xml:space="preserve">
    <value>Format incorrect</value>
  </data>
  <data name="lbFormatErrorMsgResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblAccountlockupResource1.Text" xml:space="preserve">
    <value>File format error of Account lock up</value>
  </data>
  <data name="lblAccountRepeatResource1.Text" xml:space="preserve">
    <value>Account is duplicated in Excel file</value>
  </data>
  <data name="lblADAccountExistResource1.Text" xml:space="preserve">
    <value>AD account has already existed</value>
  </data>
  <data name="lblADAccountFormatErrorResource1.Text" xml:space="preserve">
    <value>AD account format is incorrect</value>
  </data>
  <data name="lblAddedResource1.Text" xml:space="preserve">
    <value>{0} records added</value>
  </data>
  <data name="lblCompanyNoisOverResource1.Text" xml:space="preserve">
    <value>Industrial ID is limited in 10 characters</value>
  </data>
  <data name="lblDepInPartTimeResource1.Text" xml:space="preserve">
    <value>Primary and Part-time Department are duplicated</value>
  </data>
  <data name="lblDepNameErrResource1.Text" xml:space="preserve">
    <value>Department name error</value>
  </data>
  <data name="lblDepNameErrResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblDescriptionResource1.Text" xml:space="preserve">
    <value>Remark : \r\n 1. It will update to the import Excel file if the Account is existed, except the blank field.\r\n 2. It will only update the Primary Department.</value>
  </data>
  <data name="lblDomainErrorResource1.Text" xml:space="preserve">
    <value>Domain Name is not existed</value>
  </data>
  <data name="lblDomainErrorResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblEmailFormatErrorResource1.Text" xml:space="preserve">
    <value>Emil Format Incorrect</value>
  </data>
  <data name="lblExpiredatResource1.Text" xml:space="preserve">
    <value>Account expiration date format error</value>
  </data>
  <data name="lblImportFailResource1.Text" xml:space="preserve">
    <value>Check the file format, Excel 97-2003 is available.</value>
  </data>
  <data name="lblImportFailResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblInsertCountResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="lblIsMemberResource1.Text" xml:space="preserve">
    <value>this Account is external Account</value>
  </data>
  <data name="lblSuspendaccountResource1.Text" xml:space="preserve">
    <value>File format error of suspending account</value>
  </data>
  <data name="lblTaxNoisOverResource1.Text" xml:space="preserve">
    <value>Tax ID is limited in 8 characters</value>
  </data>
  <data name="lblTimeZoneErrResource1.Text" xml:space="preserve">
    <value>Time Zone of Import data is incorrect</value>
  </data>
  <data name="lblTimeZoneErrResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblUpdateCountResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="lblUpdatedResource1.Text" xml:space="preserve">
    <value>{0} records updated</value>
  </data>
  <data name="lblWarningResource1.Text" xml:space="preserve">
    <value>If the import Account is existed, system will update anyway, confirm to proceed?</value>
  </data>
  <data name="lbModifyXLSResource1.Text" xml:space="preserve">
    <value>Please correct XLS</value>
  </data>
  <data name="lbModifyXLSResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lbNotAllowNullResource1.Text" xml:space="preserve">
    <value>Account &amp; Name &amp; Department fields cannot be blank.</value>
  </data>
  <data name="lbNotAllowNullResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="PageResource1.Title" xml:space="preserve">
    <value>Import member</value>
  </data>
  <data name="panSendPWResource1.GroupingText" xml:space="preserve">
    <value />
  </data>
  <data name="panSendPWResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="TextBox1Resource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="TextBox1Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblFileNotParseResource1.Text" xml:space="preserve">
    <value>The imported file cannot be parsed</value>
  </data>
  <data name="lbAiraFaceIdExistResource1.Text" xml:space="preserve">
    <value>Facial Recognition ID is already existed</value>
  </data>
  <data name="lblColumnLengthTooLongResource1.Text" xml:space="preserve">
    <value>Exceeds the length limit</value>
  </data>
</root>