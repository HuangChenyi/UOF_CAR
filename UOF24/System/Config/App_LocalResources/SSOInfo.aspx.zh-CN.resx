<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblIPInfo1Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPRangeDescResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPInfo4Resource1.Text" xml:space="preserve">
    <value>(2)人员帐号信息中请勿设置域。</value>
  </data>
  <data name="lblIPInfo3Resource1.Text" xml:space="preserve">
    <value>(1)IP范围内的人员需拥有Microsoft 365的用户帐户。</value>
  </data>
  <data name="lblIPRangeDesc4Resource1.Text" xml:space="preserve">
    <value>以SSO方式登录失败时,用户仍可以使用标准的验证方式或者使用AD集成式验证(需先完成设置)</value>
  </data>
  <data name="lblIPInfo3Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPInfo2Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPInfo1Resource1.Text" xml:space="preserve">
    <value>(1)请务必启用IIS中UOF站点的ADAuth目录里的SSL的设置。</value>
  </data>
  <data name="lblIPRangeDescResource1.Text" xml:space="preserve">
    <value>启用后当用户的IP地址在上列区段中时系统会尝试让用户以SSO的方式登录,例如:设置192.168.1.0~192.168.1.255,而用户的IP为192.168.1.10时会优先使用SSO登录</value>
  </data>
  <data name="lblIPInfo2Resource1.Text" xml:space="preserve">
    <value>(2)IP范围内的人员需设置个人客户端凭证。</value>
  </data>
  <data name="lblIPRangeDesc2Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPRangeDesc1Resource1.Text" xml:space="preserve">
    <value>启用前请先将主机(AP Server)添加AD域中</value>
  </data>
  <data name="lblIPRangeDesc4Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="PageResource1.Title" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPRangeDesc3Resource1.Text" xml:space="preserve">
    <value>启用Azure AD SSO时:</value>
  </data>
  <data name="lblIPRangeDesc3Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPRangeDesc1Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblIPRangeDesc2Resource1.Text" xml:space="preserve">
    <value>启用客户端凭证SSO时:</value>
  </data>
  <data name="lblIPInfo4Resource1.ToolTip" xml:space="preserve">
    <value />
  </data>
</root>